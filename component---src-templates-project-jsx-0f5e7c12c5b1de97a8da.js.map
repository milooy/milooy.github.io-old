{"version":3,"sources":["webpack:///./src/components/_ui/Button.jsx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///./src/templates/project.jsx"],"names":["ButtonContainer","colors","blue400","dimensions","maxwidthMobile","pink400","purple400","blue200","blue600","blue300","Button","render","this","props","children","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","onClick","Component","ProjectHeroContainer","grey200","ProjectTitle","ProjectBody","WorkLink","Link","Project","project","meta","title","project_title","text","titleTemplate","name","content","description","property","author","concat","RichText","project_hero_image","src","url","alt","project_description","to","className","data","projectContent","prismic","allProjects","edges","node","site","siteMetadata","query"],"mappings":"wLAKMA,EAAkB,YAAO,SAAP,sBAAH,8BAEHC,IAAOC,QAFJ,qKAYEC,IAAWC,eAZb,kKA4ByBH,IAAOI,QA5BhC,OA4B+CJ,IAAOK,UA5BtD,4IAuCCL,IAAOM,QAvCR,UAwCJN,IAAOO,QAxCH,8DA6CKP,IAAOQ,QA7CZ,+CAmDfC,E,kGACFC,OAAA,WAAS,MAC0BC,KAAKC,MAAfA,GADhB,EACGC,SC1DD,SAAuCC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,ED6CI,kBAEL,OACI,YAACnB,EAAD,aACIyB,QAASb,KAAKC,MAAMY,SAChBZ,GACHD,KAAKC,MAAMC,W,GAPPY,aAaNhB,O,iNE3Df,IAAMiB,EAAuB,YAAO,MAAP,qBAAH,cACR1B,IAAO2B,QADC,4JAepBC,EAAe,YAAO,MAAP,qBAAH,4EAMZC,EAAc,YAAO,MAAP,qBAAH,0HAcXC,EAAW,YAAOC,OAAP,qBAAH,2EAORC,EAAU,SAAC,GAAsB,IAApBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KACxB,OACI,8BACI,YAAC,IAAD,CACIC,MAAUF,EAAQG,cAAc,GAAGC,KAA9B,qCACLC,cAAa,QAAUJ,EAAKC,MAC5BD,KAAM,CACF,CACIK,KAAM,cACNC,QAASN,EAAKO,aAElB,CACIC,SAAU,WACVF,QAAYP,EAAQG,cAAc,GAAGC,KAA9B,sCAEX,CACIK,SAAU,iBACVF,QAASN,EAAKO,aAElB,CACIC,SAAU,UACVF,QAAS,WAEb,CACID,KAAM,eACNC,QAAS,WAEb,CACID,KAAM,kBACNC,QAASN,EAAKS,QAElB,CACIJ,KAAM,gBACNC,QAASN,EAAKC,OAElB,CACII,KAAM,sBACNC,QAASN,EAAKO,cAEpBG,OAAOV,KAEb,YAAC,IAAD,KACI,YAACN,EAAD,KACKiB,WAASnC,OAAOuB,EAAQG,gBAE5BH,EAAQa,oBACL,YAACpB,EAAD,KACI,mBAAKqB,IAAKd,EAAQa,mBAAmBE,IAAKC,IAAI,UAGtD,YAACpB,EAAD,KACKgB,WAASnC,OAAOuB,EAAQiB,qBACzB,YAACpB,EAAD,CAAUqB,GAAI,SACV,YAAC,IAAD,CAAQC,UAAU,qBAAlB,uBAUT,sBAAc,IAAXC,EAAW,EAAXA,KACRC,EAAiBD,EAAKE,QAAQC,YAAYC,MAAM,GAAGC,KACnDxB,EAAOmB,EAAKM,KAAKC,aACvB,OACI,YAAC5B,EAAD,CAASC,QAASqB,EAAgBpB,KAAMA,KAQzC,IAAM2B,EAAQ,CAAH","file":"component---src-templates-project-jsx-0f5e7c12c5b1de97a8da.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from \"@emotion/styled\";\nimport colors from \"styles/colors\";\nimport dimensions from \"styles/dimensions\";\n\nconst ButtonContainer = styled(\"button\")`\n    padding: 1em 2em;\n    background: ${colors.blue400};\n    font-weight: 600;\n    color: white;\n    outline: none;\n    border: none;\n    font-size: 1rem;\n    border-radius: 2px;\n    position: relative;\n    transition: background 100ms ease-in-out;\n\n    @media(max-width:${dimensions.maxwidthMobile}px) {\n        padding: 0.8em 1.8em;\n        font-size: 1em;\n    }\n\n    p {\n        margin: 0;\n    }\n\n    &:before {\n        content: \"\";\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        background: linear-gradient(135deg, ${colors.pink400} 0%, ${colors.purple400} 100%);\n        z-index: -1;\n    }\n\n    &:hover {\n        cursor: pointer;\n        background: transparent;\n        transition: background 100ms ease-in-out;\n    }\n\n    &.Button--secondary {\n        background: ${colors.blue200};\n        color: ${colors.blue600};\n        padding: 0.95em 1.8em;\n        font-size: 0.95rem;\n\n        &:hover {\n            background: ${colors.blue300};\n            transition: background 100ms ease-in-out;\n        }\n    }\n`\n\nclass Button extends Component {\n    render() {\n        const { children, ...props } = this.props;\n        return (\n            <ButtonContainer\n                onClick={this.props.onClick}\n                {...props}>\n                {this.props.children}\n            </ButtonContainer>\n        );\n    }\n}\n\nexport default Button;","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport styled from \"@emotion/styled\";\nimport colors from \"styles/colors\";\nimport { Link, graphql } from 'gatsby';\nimport { RichText } from \"prismic-reactjs\";\nimport Button from \"components/_ui/Button\";\nimport Layout from \"components/Layout\";\n\nconst ProjectHeroContainer = styled(\"div\")`\n    background: ${colors.grey200};\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n    overflow: hidden;\n    position: relative;\n    padding-top: 2.25em;\n    margin-bottom: 3.5em;\n\n    img {\n        max-width: 600px;\n    }\n`\n\nconst ProjectTitle = styled(\"div\") `\n    max-width: 550px;\n    margin: 0 auto;\n    text-align: center;\n`\n\nconst ProjectBody = styled(\"div\")`\n    max-width: 550px;\n    margin: 0 auto;\n\n    .block-img {\n        margin-top: 3.5em;\n        margin-bottom: 0.5em;\n\n        img {\n            width: 100%;\n        }\n    }\n`\n\nconst WorkLink = styled(Link)`\n    margin-top: 3em;\n    display: block;\n    text-align: center;\n`\n\n\nconst Project = ({ project, meta }) => {\n    return (\n        <>\n            <Helmet\n                title={`${project.project_title[0].text} | Prist, Gatsby & Prismic Starter`}\n                titleTemplate={`%s | ${meta.title}`}\n                meta={[\n                    {\n                        name: `description`,\n                        content: meta.description,\n                    },\n                    {\n                        property: `og:title`,\n                        content: `${project.project_title[0].text} | Prist, Gatsby & Prismic Starter`,\n                    },\n                    {\n                        property: `og:description`,\n                        content: meta.description,\n                    },\n                    {\n                        property: `og:type`,\n                        content: `website`,\n                    },\n                    {\n                        name: `twitter:card`,\n                        content: `summary`,\n                    },\n                    {\n                        name: `twitter:creator`,\n                        content: meta.author,\n                    },\n                    {\n                        name: `twitter:title`,\n                        content: meta.title,\n                    },\n                    {\n                        name: `twitter:description`,\n                        content: meta.description,\n                    },\n                ].concat(meta)}\n            />\n            <Layout>\n                <ProjectTitle>\n                    {RichText.render(project.project_title)}\n                </ProjectTitle>\n                {project.project_hero_image && (\n                    <ProjectHeroContainer>\n                        <img src={project.project_hero_image.url} alt=\"bees\" />\n                    </ProjectHeroContainer>\n                )}\n                <ProjectBody>\n                    {RichText.render(project.project_description)}\n                    <WorkLink to={\"/work\"}>\n                        <Button className=\"Button--secondary\">\n                            See other work\n                        </Button>\n                    </WorkLink>\n                </ProjectBody>\n            </Layout>\n        </>\n    )\n}\n\nexport default ({ data }) => {\n    const projectContent = data.prismic.allProjects.edges[0].node;\n    const meta = data.site.siteMetadata;\n    return (\n        <Project project={projectContent} meta={meta}/>\n    )\n}\n\nProject.propTypes = {\n    project: PropTypes.object.isRequired,\n};\n\nexport const query = graphql`\n    query ProjectQuery($uid: String) {\n        prismic {\n            allProjects(uid: $uid) {\n                edges {\n                    node {\n                        project_title\n                        project_preview_description\n                        project_preview_thumbnail\n                        project_category\n                        project_post_date\n                        project_hero_image\n                        project_description\n                        _meta {\n                            uid\n                        }\n                    }\n                }\n            }\n        }\n        site {\n            siteMetadata {\n                title\n                description\n                author\n            }\n        }\n    }\n`"],"sourceRoot":""}